// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// signDblCPP
double signDblCPP(double x);
RcppExport SEXP _HydroEnR_signDblCPP(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(signDblCPP(x));
    return rcpp_result_gen;
END_RCPP
}
// findPeaksCPP
NumericVector findPeaksCPP(NumericVector vY, int m);
RcppExport SEXP _HydroEnR_findPeaksCPP(SEXP vYSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vY(vYSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(findPeaksCPP(vY, m));
    return rcpp_result_gen;
END_RCPP
}
// gibbs_cpp
NumericMatrix gibbs_cpp(int N, int thin);
RcppExport SEXP _HydroEnR_gibbs_cpp(SEXP NSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs_cpp(N, thin));
    return rcpp_result_gen;
END_RCPP
}
// PDM
List PDM(double fc, double Cmin, double Cmax, double b, NumericVector P, NumericVector PE, double s, double be, double kg, double St, double bg, double k1, double k2, double kb, double area);
RcppExport SEXP _HydroEnR_PDM(SEXP fcSEXP, SEXP CminSEXP, SEXP CmaxSEXP, SEXP bSEXP, SEXP PSEXP, SEXP PESEXP, SEXP sSEXP, SEXP beSEXP, SEXP kgSEXP, SEXP StSEXP, SEXP bgSEXP, SEXP k1SEXP, SEXP k2SEXP, SEXP kbSEXP, SEXP areaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type fc(fcSEXP);
    Rcpp::traits::input_parameter< double >::type Cmin(CminSEXP);
    Rcpp::traits::input_parameter< double >::type Cmax(CmaxSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type P(PSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type PE(PESEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type be(beSEXP);
    Rcpp::traits::input_parameter< double >::type kg(kgSEXP);
    Rcpp::traits::input_parameter< double >::type St(StSEXP);
    Rcpp::traits::input_parameter< double >::type bg(bgSEXP);
    Rcpp::traits::input_parameter< double >::type k1(k1SEXP);
    Rcpp::traits::input_parameter< double >::type k2(k2SEXP);
    Rcpp::traits::input_parameter< double >::type kb(kbSEXP);
    Rcpp::traits::input_parameter< double >::type area(areaSEXP);
    rcpp_result_gen = Rcpp::wrap(PDM(fc, Cmin, Cmax, b, P, PE, s, be, kg, St, bg, k1, k2, kb, area));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_HydroEnR_signDblCPP", (DL_FUNC) &_HydroEnR_signDblCPP, 1},
    {"_HydroEnR_findPeaksCPP", (DL_FUNC) &_HydroEnR_findPeaksCPP, 2},
    {"_HydroEnR_gibbs_cpp", (DL_FUNC) &_HydroEnR_gibbs_cpp, 2},
    {"_HydroEnR_PDM", (DL_FUNC) &_HydroEnR_PDM, 15},
    {NULL, NULL, 0}
};

RcppExport void R_init_HydroEnR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
